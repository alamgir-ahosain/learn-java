                            ## Exception Handling in Java

1. An exception is an unwanted event that disrupts normal program flow.It’s an object representing an error.

Type of Exception
    1.User defined
        user defined exception classes that extends either 
        exception(Checked exception) or RuntimeException(Unchecked exception).

    2. Build in exception
        1.Checked Exception(compile time exception)
           1. the compiler forces to handle.
           2. These are exception that must be either caught or declared in the method. 
           3. Example: IOException , SQLException, FileNotFoundException.

        2.Unchecked exception(Runtime exception)
           1. They are subclasses of java.lang.RuntimeException.
           2. these are exception that do no need to the explicity or manually handled.
           3. Example: ArithmeticException, NullPointerException, ArrayIndexOutOfBoundsException.

try-catch block
    1. try Block
        A block of code that cause might an exception.
   2. catch Block
        A block of code that catches and handles the exception thrown by try block.
   3. Finally Block
        Execute code after the try-catch blocks,used mainly for cleanup operations.
        Always Execute,ideal for closing resourcs.

    i. when exception occurs in the try block,it throwns exception objects to catch block where the exception is handled. 
    ii. Only the first exception that occurs in the catch block is caught — the rest are skipped.

    Example:
    try {System.out.println(a/b);}
    // Object <- Throwable <- Exception <- RuntimeException <- ArithmeticException
    catch (Throwable th) {  System.out.println("General Exception"); }
    finally{System.out.println("Always Execution")}



throws  keyword
    1. Declares that a method might throw exception.
    2.used in the method signature to indicate that the method might throw exception of spicific types.
    3.calling method must handle or declare it.   
    4.can declare multiple exception.
    5.followed by exception class names.
    Example: void readFile() throws IOException, SQLException

throw keyword
    1. Used to manually throw an exception from any keyword or block of code.
    2. Used to throw new or existing exception objects.
    3.Can throw only one exception at a time.
    4. followed by an instance of an exception class.
    Example: throw new IllegalArgumentException("Invalid input");


    
Key Points
    1. All exception classes are subclasses of the java.lang.Throwable class.
    2. Stack trace shows the exception, message, and the method call sequence (LIFO) that led to the error.
    3. throw :To manually trigger and created an exception.
    4. throws: To declare that a method might throw an exception
    5. try-catch :To handle the exception when it occurs
